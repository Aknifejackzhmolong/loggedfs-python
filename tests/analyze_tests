#!/usr/bin/env python3


from pprint import pprint as pp


def __compile_stats__(in_dict):

	tests_total = 0
	tests_failed = 0

	for item_key in in_dict.keys():
		tests_total += 1
		if not in_dict[item_key]:
			tests_failed += 1

	return {
		'int_tests': tests_total,
		'int_failed': tests_failed
		}


def __process_dict_result__(in_dict):

	ret_list = []
	for test_item in range(1, in_dict['int_tests'] + 1):
		ret_list.append((
			'%s/%s:%d' % (in_dict['test_fld'], in_dict['test_file'], test_item),
			test_item not in in_dict['failed_list']
			))

	return ret_list


def __process_raw_result_item__(in_str):

	lines = in_str.split('\n')

	test_group = lines[0].split('fstest/tests/')[1].split('(')[0].strip()
	stats = lines[0].split('(Wstat:')[1].split(')')[0]
	lines[1] = lines[1].replace('Failed tests:', '').replace('Failed test:', '')

	failed_list = []

	for line in lines[1:]:

		if line.startswith('Files=') or line.startswith('Result: ') or line.strip() == '':
			continue

		line = line.strip()
		sections = line.split(', ')
		for section in sections:
			section_el = [int(el) for el in section.split('-')]
			if len(section_el) == 1:
				failed_list.append(section_el[0])
			else:
				failed_list += list(range(section_el[0], section_el[1] + 1))

	wstat = int(stats.split('Tests')[0].strip())
	assert wstat == 0 # No sure what this value says ... usually 0, so raise an error if not

	return {
		'test_fld': test_group.split('/')[0],
		'test_file': test_group.split('/')[1],
		'int_tests': int(stats.split('Tests:')[1].split('Failed')[0].strip()),
		'int_failed': int(stats.split('Failed:')[1].strip()),
		'failed_list': failed_list
		}


def __process_raw_results__(in_str):

	items = in_str.split('-------------------')[1].split('\n/')
	items = [__process_raw_result_item__(item) for item in items if item != '']

	tuple_items = []
	for item in items:
		tuple_items += __process_dict_result__(item)

	return {key: value for (key, value) in tuple_items}


def __read_file__(filename):

	f = open(filename, 'r')
	data = f.read()
	f.close()
	return data


if __name__ == '__main__':

	test_log_fn = 'test.log'
	test_results_fn = 'test_results.log'
	test_errors_fn = 'test_errors.log'

	test_results = __process_raw_results__(__read_file__(test_results_fn))
	pp(test_results)
	pp(__compile_stats__(test_results))
